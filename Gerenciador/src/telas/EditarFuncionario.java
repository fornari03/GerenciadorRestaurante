package telas;

import classes.Controle;
import classes.Entregador;
import classes.Funcionario;
import classes.Garcom;
import classes.Gerente;
import classes.ManipulaArquivos;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;

/**
 * Classe para a tela de editar funcionário
 */
public class EditarFuncionario extends javax.swing.JFrame {
    /** Atributo para armazenar o relatório de funcionário para que seja possível voltar pelo btnVoltar */
    private RelatorioFuncionarios relatorio;
    
    /** Atributo para o funcionário */
    private Funcionario funcionario;
    
    /** Atributo para o índice do funcionário selecionado */
    private int indice;
    
    /** Atributo para verificar se está em modo de pesquisa ou não */
    private boolean pesquisa;
    
    /**
     * Método construtor da classe
     * @param relatorio Tela de relatório em que se abriu a tela de editar funcionário
     * @param func Funcionário que será editado
     * @param indice Índice do funcionário selecionado
     * @param pesquisa Modo de pesquisa ou não
     */
    public EditarFuncionario(RelatorioFuncionarios relatorio, Funcionario func, int indice, boolean pesquisa) {
        initComponents();
        this.relatorio = relatorio;
        this.funcionario = func;
        this.indice = indice;
        this.pesquisa = pesquisa;
        
        this.txtNomeFuncionario.setText(func.getNome());
        this.ftxtCpfFuncionario.setText(func.getCPF());
        this.txtSalario.setText(String.valueOf(func.getSalario()));
        this.lblData.setText(func.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        
        // para quando o funcionario selecionado for um gerente
        if (func instanceof Gerente) {
            // habilita somente os campos relacionados e mostra os dados do gerente
            this.ptxtSenhaGerente.setText(String.valueOf(((Gerente) func).getSenha()));
            this.ptxtConfirmarSenhaGerente.setText(String.valueOf(((Gerente) func).getSenha()));
            this.ptxtSenhaGerente.setEnabled(true);
            this.ptxtConfirmarSenhaGerente.setEnabled(true);
            this.txtCnhEntregador.setEnabled(false);
            
        } else if (func instanceof Entregador) { // para quando o funcionario selecionado for um entregador
            // habilita somente os campos relacionados e mostra os dados do entregador
            this.txtCnhEntregador.setText(((Entregador) func).getCNH());
            this.ptxtSenhaGerente.setEnabled(false);
            this.ptxtConfirmarSenhaGerente.setEnabled(false);
            this.txtCnhEntregador.setEnabled(true);
            
        } else { // para quando o funcionario selecionado for um garçom
            // habilita somente os campos relacionados e mostra os dados do garçom
            this.ptxtSenhaGerente.setEnabled(false);
            this.ptxtConfirmarSenhaGerente.setEnabled(false);
            this.txtCnhEntregador.setEnabled(false);
        }
    }
    
    /**
     * Método para limpar os campos da tela
     */
    private void limparFields() {
        // limpa todos os campos da tela
        this.txtNomeFuncionario.setText("");
        this.ftxtCpfFuncionario.setText("");
        this.ptxtSenhaGerente.setText("");
        this.ptxtConfirmarSenhaGerente.setText("");
        this.txtCnhEntregador.setText("");
        this.txtSalario.setText("");
    }
    
    /**
     * Método para desabilitar os campos da tela
     */
    private void desabilitarFields() {
        // desabilita todos os campos da tela
        this.txtNomeFuncionario.setEnabled(false);
        this.ftxtCpfFuncionario.setEnabled(false);
        this.ptxtSenhaGerente.setEnabled(false);
        this.ptxtConfirmarSenhaGerente.setEnabled(false);
        this.txtCnhEntregador.setEnabled(false);
        this.txtSalario.setEnabled(false);
        this.btnSalvar.setEnabled(false);
        this.btnExcluir.setEnabled(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblConfirmarSenhaGerente = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNomeFuncionario = new javax.swing.JTextField();
        lblNomeFuncionario = new javax.swing.JLabel();
        ftxtCpfFuncionario = new javax.swing.JFormattedTextField();
        lblCpfFuncionario = new javax.swing.JLabel();
        lblCnhEntregador = new javax.swing.JLabel();
        txtCnhEntregador = new javax.swing.JTextField();
        lblSalario = new javax.swing.JLabel();
        txtSalario = new javax.swing.JTextField();
        lblSenhaGerente = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        ptxtSenhaGerente = new javax.swing.JPasswordField();
        ptxtConfirmarSenhaGerente = new javax.swing.JPasswordField();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        lblDesde = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alterar informações do funcionário");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imagens/funcionario.png")).getImage());

        lblConfirmarSenhaGerente.setText("Confirmar senha:");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/businessapplication_edit_male_user_thepencil_theclient_negocio_2321.png"))); // NOI18N

        txtNomeFuncionario.setToolTipText("Edite o nome do funcionário");

        lblNomeFuncionario.setText("Nome:");

        try {
            ftxtCpfFuncionario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtCpfFuncionario.setToolTipText("Edite o CPF do funcionário");

        lblCpfFuncionario.setText("CPF:");

        lblCnhEntregador.setText("CNH:");

        txtCnhEntregador.setToolTipText("Edite a CNH do funcionário");

        lblSalario.setText("Salário:");

        txtSalario.setToolTipText("Edite o salário do funcionário");

        lblSenhaGerente.setText("Senha:");

        btnVoltar.setBackground(new java.awt.Color(242, 242, 242));
        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/3643764-back-backward-left-reply-turn_113415 (1).png"))); // NOI18N
        btnVoltar.setBorder(null);
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        ptxtSenhaGerente.setToolTipText("Edite a senha do gerente");

        ptxtConfirmarSenhaGerente.setToolTipText("Edite a senha do gerente");

        btnSalvar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSalvar.setText("Salvar alterações");
        btnSalvar.setToolTipText("Salve as alterações realizadas");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(204, 51, 0));
        btnExcluir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir funcionário");
        btnExcluir.setToolTipText("Exclua o funcionário definitivamente do sistema");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        lblDesde.setText("Na empresa desde:");

        lblData.setText("dd/MM/yyyy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblNomeFuncionario)
                                    .addComponent(lblCpfFuncionario))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ftxtCpfFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDesde)
                                .addGap(18, 18, 18)
                                .addComponent(lblData))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblSenhaGerente)
                                    .addComponent(lblCnhEntregador)
                                    .addComponent(lblSalario))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCnhEntregador, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ptxtSenhaGerente, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)
                                        .addComponent(lblConfirmarSenhaGerente)
                                        .addGap(18, 18, 18)
                                        .addComponent(ptxtConfirmarSenhaGerente, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnVoltar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(btnSalvar)
                        .addGap(75, 75, 75)
                        .addComponent(btnExcluir)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVoltar)
                .addGap(2, 2, 2)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNomeFuncionario)
                    .addComponent(txtNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCpfFuncionario)
                    .addComponent(ftxtCpfFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ptxtSenhaGerente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ptxtConfirmarSenhaGerente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblConfirmarSenhaGerente)
                    .addComponent(lblSenhaGerente))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCnhEntregador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCnhEntregador))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSalario)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDesde)
                    .addComponent(lblData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnExcluir))
                .addGap(59, 59, 59))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        // fecha a tela de editar e reabre a tela de relatorio
        this.setVisible(false);
        this.relatorio.setVisible(true);
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // salva os novos dados do funcionário em questão
        // antes de tudo verifica de qual instância é o funcionário
        if (this.funcionario instanceof Gerente) { // para gerentes
            // verifica se todos os campos estão devidamente preenchidos
            if (txtNomeFuncionario.getText().isBlank() || ftxtCpfFuncionario.getText().equals("   .   .   -  ") || txtSalario.getText().isBlank() || String.valueOf(ptxtSenhaGerente.getPassword()).isBlank() || String.valueOf(ptxtConfirmarSenhaGerente.getPassword()).isBlank()) {
                JOptionPane.showMessageDialog(null, "Todos os campos habilitados devem ser preenchidos!", "Atenção", JOptionPane.WARNING_MESSAGE);
            } else {
                if(!(String.valueOf(ptxtSenhaGerente.getPassword()).equals(String.valueOf(ptxtConfirmarSenhaGerente.getPassword())))) {
                    // verifica se a senha está igual nos campos senha e confirmar senha, se não estiver, gera mensagem de alerta e ambos os campos serão limpos
                    JOptionPane.showMessageDialog(null, "A confirmação de senha está errada!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    this.ptxtSenhaGerente.setText("");
                    this.ptxtConfirmarSenhaGerente.setText("");
                    this.ptxtSenhaGerente.requestFocus();
                } else {
                    // se estiver tudo certo, verifica se é possível atualizar as informações do funcionário com os dados dos campos
                    try {
                        funcionario.setNome(this.txtNomeFuncionario.getText().trim());
                        funcionario.setCPF(this.ftxtCpfFuncionario.getText().trim());
                        funcionario.setSalario(Double.parseDouble(this.txtSalario.getText().trim()));
                        ((Gerente)funcionario).setSenha(Integer.parseInt(String.valueOf(this.ptxtSenhaGerente.getPassword())));
                        
                        // ALTERANDO O ARQUIVO DE FUNCIONÁRIOS
                        ManipulaArquivos.apagarTxt("Funcionarios.txt");
                        for (Funcionario f : Controle.funcionarios) {
                            String dadosFuncionario;
                            if (f instanceof Gerente)
                                dadosFuncionario = ("Gerente, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+ f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+ ", "+((Gerente)f).getSenha()+"\n");
                            else if (f instanceof Garcom)
                                dadosFuncionario = ("Garcom, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", " + ((Garcom)f).getQuantidadeAtendimentos()+ "\n");
                            else
                                dadosFuncionario = ("Entregador, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", "+((Entregador)f).getCNH()+", " + ((Entregador)f).getQuantidadeEntregas()+ "\n");
                            ManipulaArquivos.escreverTxt("Funcionarios.txt", dadosFuncionario);
                        }
                        
                        limparFields();
                        desabilitarFields();
                        JOptionPane.showMessageDialog(null, "Funcionário editado com sucesso.", "Atualizado", JOptionPane.INFORMATION_MESSAGE);


                    } catch (Exception e) {
                        // se algum campo estiver com um dado de tipo diferente:
                        JOptionPane.showMessageDialog(null, "Um ou mais campos estão com dados inválidos!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } 

        } else if (this.funcionario instanceof Garcom) { // para garçons
            // verifica se todos os campos estão devidamente preenchidos
            if (txtNomeFuncionario.getText().isBlank() || ftxtCpfFuncionario.getText().isBlank() || txtSalario.getText().isBlank())
                JOptionPane.showMessageDialog(null, "Todos os campos habilitados devem ser preenchidos!", "Atenção", JOptionPane.WARNING_MESSAGE);
            else {
                // se estiver tudo certo, verifica se é possível atualizar as informações do funcionário com os dados dos campos
                try {
                    funcionario.setNome(this.txtNomeFuncionario.getText().trim());
                    funcionario.setCPF(this.ftxtCpfFuncionario.getText().trim());
                    funcionario.setSalario(Double.parseDouble(this.txtSalario.getText().trim()));
                    
                    // ALTERANDO O ARQUIVO DE FUNCIONÁRIOS
                    ManipulaArquivos.apagarTxt("Funcionarios.txt");
                    for (Funcionario f : Controle.funcionarios) {
                        String dadosFuncionario;
                        if (f instanceof Gerente)
                            dadosFuncionario = ("Gerente, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+ f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+ ", "+((Gerente)f).getSenha()+"\n");
                        else if (f instanceof Garcom)
                            dadosFuncionario = ("Garcom, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", " + ((Garcom)f).getQuantidadeAtendimentos()+ "\n");
                        else
                            dadosFuncionario = ("Entregador, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", "+((Entregador)f).getCNH()+", " + ((Entregador)f).getQuantidadeEntregas()+ "\n");
                        ManipulaArquivos.escreverTxt("Funcionarios.txt", dadosFuncionario);
                    }

                    limparFields();
                    desabilitarFields();
                    JOptionPane.showMessageDialog(null, "Funcionário editado com sucesso.", "Atualizado", JOptionPane.INFORMATION_MESSAGE);
                    // ATUALIZAR NA TELA DE RELATÓRIO
                    // ADICIONAR NO ARQUIVO DE FUNCIONÁRIOS

                } catch (Exception e) {
                    // se algum campo estiver com um dado de tipo diferente:
                    JOptionPane.showMessageDialog(null, "Um ou mais campos estão com dados inválidos!", "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
        
        } else { // para entregadores
            // verifica se todos os campos estão devidamente preenchidos
            if (txtNomeFuncionario.getText().isBlank() || ftxtCpfFuncionario.getText().isBlank() || txtSalario.getText().isBlank() || txtCnhEntregador.getText().isBlank())
                JOptionPane.showMessageDialog(null, "Todos os campos habilitados devem ser preenchidos!", "Atenção", JOptionPane.WARNING_MESSAGE);
            else {
                // se estiver tudo certo, verifica se é possível atualizar as informações do funcionário com os dados dos campos
                try {
                    funcionario.setNome(this.txtNomeFuncionario.getText().trim());
                    funcionario.setCPF(this.ftxtCpfFuncionario.getText().trim());
                    funcionario.setSalario(Double.parseDouble(this.txtSalario.getText().trim()));
                    ((Entregador)funcionario).setCNH(this.txtCnhEntregador.getText().trim());
                    
                    // ALTERANDO O ARQUIVO DE FUNCIONÁRIOS
                    ManipulaArquivos.apagarTxt("Funcionarios.txt");
                    for (Funcionario f : Controle.funcionarios) {
                        String dadosFuncionario;
                        if (f instanceof Gerente)
                            dadosFuncionario = ("Gerente, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+ f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+ ", "+((Gerente)f).getSenha()+"\n");
                        else if (f instanceof Garcom)
                            dadosFuncionario = ("Garcom, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", " + ((Garcom)f).getQuantidadeAtendimentos()+ "\n");
                        else
                            dadosFuncionario = ("Entregador, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", "+((Entregador)f).getCNH()+", " + ((Entregador)f).getQuantidadeEntregas()+ "\n");
                        ManipulaArquivos.escreverTxt("Funcionarios.txt", dadosFuncionario);
                    }
                    
                    limparFields();
                    desabilitarFields();
                    JOptionPane.showMessageDialog(null, "Funcionário editado com sucesso.", "Atualizado", JOptionPane.INFORMATION_MESSAGE);
                    // ATUALIZAR NA TELA DE RELATÓRIO
                    // ADICIONAR NO ARQUIVO DE FUNCIONÁRIOS

                } catch (Exception e) {
                    // se algum campo estiver com um dado de tipo diferente:
                    JOptionPane.showMessageDialog(null, "Um ou mais campos estão com dados inválidos!", "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // exclui definitivamente o funcionário em questão
        if (JOptionPane.showConfirmDialog(null, "Esta ação é irreversível. Deseja realmente fazê-la?") == 0) {
            JOptionPane.showMessageDialog(null, "Funcionário excluído com sucesso.", "Excluído", JOptionPane.INFORMATION_MESSAGE);
            if (pesquisa)
                this.relatorio.getModelo_pesquisa().remove(this.indice);
            else
                this.relatorio.getModelo().remove(this.indice);            
            Controle.funcionarios.remove(funcionario);
            
            // ALTERANDO O ARQUIVO DE FUNCIONÁRIOS
            ManipulaArquivos.apagarTxt("Funcionarios.txt");
            for (Funcionario f : Controle.funcionarios) {
                String dadosFuncionario;
                if (f instanceof Gerente)
                    dadosFuncionario = ("Gerente, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+ f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+ ", "+((Gerente)f).getSenha()+"\n");
                else if (f instanceof Garcom)
                    dadosFuncionario = ("Garcom, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", " + ((Garcom)f).getQuantidadeAtendimentos()+ "\n");
                else
                    dadosFuncionario = ("Entregador, " + f.getNome()+", "+ f.getCPF()+", "+ f.getSalario()+", "+f.getDiaContratado().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))+", "+((Entregador)f).getCNH()+", " + ((Entregador)f).getQuantidadeEntregas()+ "\n");
                ManipulaArquivos.escreverTxt("Funcionarios.txt", dadosFuncionario);
            }
            
            limparFields();
            desabilitarFields();
            // ATUALIZAR NA TELA DE RELATÓRIO
            // REMOVER DO ARQUIVO DE FUNCIONARIOS
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new EditarFuncionario().setVisible(true); NÃO É UTILIZADO
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JFormattedTextField ftxtCpfFuncionario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblCnhEntregador;
    private javax.swing.JLabel lblConfirmarSenhaGerente;
    private javax.swing.JLabel lblCpfFuncionario;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDesde;
    private javax.swing.JLabel lblNomeFuncionario;
    private javax.swing.JLabel lblSalario;
    private javax.swing.JLabel lblSenhaGerente;
    private javax.swing.JPasswordField ptxtConfirmarSenhaGerente;
    private javax.swing.JPasswordField ptxtSenhaGerente;
    private javax.swing.JTextField txtCnhEntregador;
    private javax.swing.JTextField txtNomeFuncionario;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
}
