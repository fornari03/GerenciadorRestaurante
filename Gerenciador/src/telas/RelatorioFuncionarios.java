package telas;

import classes.Funcionario;
import classes.FuncionarioTableModel;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class RelatorioFuncionarios extends javax.swing.JFrame {
    
    /** Atributo para armazenar um FuncionarioTableModel */
    private FuncionarioTableModel modelo;
    
    /** Atributo para armazenar um ClienteTableModel para o modo de pesquisa */
    private FuncionarioTableModel modeloPesquisa;
    
    /**
     * Creates new form RelatorioFuncionarios
     */
    
    /**
     * Método construtor da classe
     */
    public RelatorioFuncionarios() {
        initComponents();
        modelo = new FuncionarioTableModel();
        this.tblFuncionarios.setModel(modelo);
    }

    /**
     * Método getter para o modelo
     * @return Retorna o modelo
     */
    public FuncionarioTableModel getModelo() {
        return modelo;
    }

    /**
     * Método setter para o modelo
     * @param modelo Novo valor para o atributo modelo
     */
    public void setModelo(FuncionarioTableModel modelo) {
        this.modelo = modelo;
    }

    /**
     * Método getter para o modeloPesquisa
     * @return Retorna o modeloPesquisa
     */
    public FuncionarioTableModel getModelo_pesquisa() {
        return modeloPesquisa;
    }

    /**
     * Método setter para o modeloPesquisa
     * @param modelo_pesquisa Novo valor para o atributo modeloPesquisa
     */
    public void setModelo_pesquisa(FuncionarioTableModel modelo_pesquisa) {
        this.modeloPesquisa = modelo_pesquisa;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFuncionarios = new javax.swing.JPanel();
        scrMostraFuncionarios = new javax.swing.JScrollPane();
        tblFuncionarios = new javax.swing.JTable();
        lblPesquisar = new javax.swing.JLabel();
        txtPesquisar = new javax.swing.JTextField();
        btnVoltar = new javax.swing.JButton();
        btnProsseguir = new javax.swing.JButton();
        btnImagemPesquisar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatório Funcionários");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imagens/relatorio1.png")).getImage());

        pnlFuncionarios.setBorder(javax.swing.BorderFactory.createTitledBorder("Funcionários"));

        tblFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF", "CNH", "Tempo de serviço", "Atendimentos", "Salário", "Função"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFuncionarios.getTableHeader().setReorderingAllowed(false);
        scrMostraFuncionarios.setViewportView(tblFuncionarios);
        if (tblFuncionarios.getColumnModel().getColumnCount() > 0) {
            tblFuncionarios.getColumnModel().getColumn(0).setResizable(false);
            tblFuncionarios.getColumnModel().getColumn(1).setResizable(false);
            tblFuncionarios.getColumnModel().getColumn(2).setResizable(false);
            tblFuncionarios.getColumnModel().getColumn(3).setResizable(false);
            tblFuncionarios.getColumnModel().getColumn(4).setResizable(false);
            tblFuncionarios.getColumnModel().getColumn(5).setResizable(false);
            tblFuncionarios.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout pnlFuncionariosLayout = new javax.swing.GroupLayout(pnlFuncionarios);
        pnlFuncionarios.setLayout(pnlFuncionariosLayout);
        pnlFuncionariosLayout.setHorizontalGroup(
            pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrMostraFuncionarios)
                .addContainerGap())
        );
        pnlFuncionariosLayout.setVerticalGroup(
            pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrMostraFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblPesquisar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPesquisar.setText("Pesquisar:");

        txtPesquisar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPesquisar.setToolTipText("Pesquise pelo nome ou CPF do funcionário");
        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyTyped(evt);
            }
        });

        btnVoltar.setBackground(new java.awt.Color(242, 242, 242));
        btnVoltar.setForeground(new java.awt.Color(242, 242, 242));
        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/3643764-back-backward-left-reply-turn_113415 (1).png"))); // NOI18N
        btnVoltar.setBorder(null);
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnProsseguir.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnProsseguir.setText("Prosseguir");
        btnProsseguir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProsseguirActionPerformed(evt);
            }
        });

        btnImagemPesquisar.setBackground(new java.awt.Color(242, 242, 242));
        btnImagemPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/magnifier-1_icon-icons.com_56924 (1).png"))); // NOI18N
        btnImagemPesquisar.setToolTipText("Pesquisar");
        btnImagemPesquisar.setBorder(null);
        btnImagemPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagemPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnVoltar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(lblPesquisar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(btnImagemPesquisar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(446, 446, 446)
                .addComponent(btnProsseguir)
                .addContainerGap(446, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVoltar)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnImagemPesquisar)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnProsseguir)
                .addGap(39, 39, 39))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        // fecha a tela de relatório
        this.setVisible(false);
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnProsseguirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProsseguirActionPerformed
        // quando clica em prosseguir, muda para a tela de edição do funcionário selecionado
        try { // verifica se algum funcionário foi selecionado na tabela
            new EditarFuncionario(this, modeloPesquisa.getFuncionario(this.tblFuncionarios.getSelectedRow()), this.tblFuncionarios.getSelectedRow(), true).setVisible(true);
            this.setVisible(false);
        } catch (Exception e) {
            try {
                new EditarFuncionario(this, modelo.getFuncionario(this.tblFuncionarios.getSelectedRow()), this.tblFuncionarios.getSelectedRow(), false).setVisible(true);
                this.setVisible(false);
            } catch (Exception e1) {
                JOptionPane.showMessageDialog(null, "Selecione um funcionário para prosseguir.", "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnProsseguirActionPerformed

    private void btnImagemPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagemPesquisarActionPerformed
        // quando clicado, faz a pesquisa do CPF selecionado
        boolean achou = false;
        ArrayList<Funcionario> funcionariosPesquisa = new ArrayList();
        this.modeloPesquisa = new FuncionarioTableModel(funcionariosPesquisa);
        
        Character letra = '0';
        try {   
        letra = this.txtPesquisar.getText().charAt(0);
        } catch (Exception e) {}
        if (Character.isDigit(letra)) {
            // pesquisa por CPF
            for(int i=0; i<modelo.getRowCount(); i++) {
                String sub = String.valueOf(this.modelo.getValueAt(i, 1)).substring(0, this.txtPesquisar.getText().trim().length());
                if (this.txtPesquisar.getText().trim().equals(sub)) {
                    achou = true;
                    funcionariosPesquisa.add(modelo.getFuncionario(i));
                }
            }
            if (!achou)
                JOptionPane.showMessageDialog(null, "Nenhum CPF encontrado.", "Não encontrado", JOptionPane.INFORMATION_MESSAGE);
            else
                this.tblFuncionarios.setModel(modeloPesquisa);
            
        } else {
            // pesquisa por nome
                for(int i=0; i<modelo.getRowCount(); i++) {
                    String sub = String.valueOf(this.modelo.getValueAt(i, 0));
                    try {
                        sub = String.valueOf(this.modelo.getValueAt(i, 0)).substring(0, this.txtPesquisar.getText().trim().length());
                    } catch (Exception e) {}

                    if (this.txtPesquisar.getText().trim().toLowerCase().equals(sub.toLowerCase())) {
                        achou = true;
                        funcionariosPesquisa.add(modelo.getFuncionario(i));
                    }
                }
            if (!achou)
                JOptionPane.showMessageDialog(null, "Nenhum nome encontrado.", "Não encontrado", JOptionPane.INFORMATION_MESSAGE);
            else
                this.tblFuncionarios.setModel(modeloPesquisa);
        }    
        
    }//GEN-LAST:event_btnImagemPesquisarActionPerformed

    private void txtPesquisarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyTyped
        // impede o usuário de colocar mais do que 14 dígitos (número do CPF com '.' e '-') e auxilia na escrita
        try {
            Character letra = this.txtPesquisar.getText().charAt(0);
            if (Character.isDigit(letra)) {
                switch (this.txtPesquisar.getText().length()) {
                    case 3:
                        this.txtPesquisar.setText(this.txtPesquisar.getText() + ".");
                        break;
                    case 7:
                        this.txtPesquisar.setText(this.txtPesquisar.getText() + ".");
                        break;
                    case 11:
                        this.txtPesquisar.setText(this.txtPesquisar.getText() + "-");
                        break;
                    default:
                        break;
            }
        
            if (this.txtPesquisar.getText().length() >= 13)
                this.txtPesquisar.setText(this.txtPesquisar.getText().substring(0, 13));
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_txtPesquisarKeyTyped

    private void txtPesquisarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyPressed
        // pesquisar pela tecla Enter
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            // quando clica na tecla Enter, faz a pesquisa do CPF selecionado
            boolean achou = false;
            ArrayList<Funcionario> funcionariosPesquisa = new ArrayList();
            this.modeloPesquisa = new FuncionarioTableModel(funcionariosPesquisa);

            Character letra = '0';
            try {   
            letra = this.txtPesquisar.getText().charAt(0);
            } catch (Exception e) {}
            if (Character.isDigit(letra)) {
                // pesquisa por CPF
                for(int i=0; i<modelo.getRowCount(); i++) {
                    String sub = String.valueOf(this.modelo.getValueAt(i, 1)).substring(0, this.txtPesquisar.getText().trim().length());
                    if (this.txtPesquisar.getText().trim().equals(sub)) {
                        achou = true;
                        funcionariosPesquisa.add(modelo.getFuncionario(i));
                    }
                }
                if (!achou)
                    JOptionPane.showMessageDialog(null, "Nenhum CPF encontrado.", "Não encontrado", JOptionPane.INFORMATION_MESSAGE);
                else
                    this.tblFuncionarios.setModel(modeloPesquisa);
                
            } else {
                // pesquisa por nome
                    for(int i=0; i<modelo.getRowCount(); i++) {
                        String sub = String.valueOf(this.modelo.getValueAt(i, 0));
                        try {
                            sub = String.valueOf(this.modelo.getValueAt(i, 0)).substring(0, this.txtPesquisar.getText().trim().length());
                        } catch (Exception e) {}

                        if (this.txtPesquisar.getText().trim().toLowerCase().equals(sub.toLowerCase())) {
                            achou = true;
                            funcionariosPesquisa.add(modelo.getFuncionario(i));
                        }
                    }
                if (!achou)
                    JOptionPane.showMessageDialog(null, "Nenhum nome encontrado.", "Não encontrado", JOptionPane.INFORMATION_MESSAGE);
                else
                    this.tblFuncionarios.setModel(modeloPesquisa);
            } 
        }
    }//GEN-LAST:event_txtPesquisarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatorioFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatorioFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatorioFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatorioFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelatorioFuncionarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImagemPesquisar;
    private javax.swing.JButton btnProsseguir;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JPanel pnlFuncionarios;
    private javax.swing.JScrollPane scrMostraFuncionarios;
    private javax.swing.JTable tblFuncionarios;
    private javax.swing.JTextField txtPesquisar;
    // End of variables declaration//GEN-END:variables
}
